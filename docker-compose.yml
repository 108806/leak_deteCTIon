version: '3.8'
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_DATA}
    ports:
      - "5432:5432"
    volumes:
      - "./data/postgres_data:/var/lib/postgresql/data"
    networks:
      - cti_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATA}"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 5s

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - xpack.security.enabled=false
      - search.max_async_search_response_size=200mb
    ports:
      - "8200:9200"
    volumes:
      - "./data/es_data:/usr/share/elasticsearch/data"
    networks:
      - cti_net
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:9200/_cluster/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 5s
    depends_on:
      - postgres

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "./data/minio_data:/data"
    networks:
      - cti_net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  django:
    image: python:3.10
    container_name: django
    working_dir: /usr/src/app
    volumes:
      - "./django:/usr/src/app"
      - "./.env:/usr/src/app/.env"
      - "./telegram_downloader/app/channels:/usr/share/Telegram-Files/"
      - "./my_combolists:/usr/share/combos"
    ports:
      - "8000:8000"
    networks:
      - cti_net
    depends_on:
      - postgres
    command: >
      sh -c "pip install --upgrade pip && 
             pip install -r requirements.txt && 
             python manage.py makemigrations --noinput && 
             python manage.py migrate --noinput && 
             python manage.py collect_scrap && 
             python manage.py process_scrap && 
             python manage.py runserver 0.0.0.0:8000"

  qcluster:
    image: python:3.10
    container_name: qcluster
    working_dir: /usr/src/app
    volumes:
      - "./django:/usr/src/app"
      - "./.env:/usr/src/app/.env"
    networks:
      - cti_net
    depends_on:
      - postgres
      - django
    command: >
      sh -c "pip install --upgrade pip; pip install -r requirements.txt && python manage.py qcluster"

  telegram-downloader:
    image: python:3.10
    container_name: telegram-downloader
    working_dir: /usr/src/app/
    stdin_open: true  # Keep stdin open for NOT WORKING interactive input
    tty: true         # Allocate a pseudo-TTY
    volumes:
      - "./telegram_downloader/app/:/usr/src/app/"
    # ports:
    #   - "8001:8000"
    networks:
      - cti_net
    command:
      - sh
      - -c
      - "pwd && ls -la; pip install --upgrade pip; pip install -r requirements.txt && python main.py"

volumes:
  postgres_data:
  es_data:
  minio_data:
  my_combolists:

networks:
  cti_net:
